package org.jboss.tools.vwatch.report;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;
import org.jboss.tools.vwatch.Settings;
import org.jboss.tools.vwatch.model.Bundle;
import org.jboss.tools.vwatch.model.Installation;
import org.jboss.tools.vwatch.model.Issue;
import org.jboss.tools.vwatch.model.Severity;
import org.jboss.tools.vwatch.service.BundleService;
import org.jboss.tools.vwatch.service.StopWatch;
import org.jboss.tools.vwatch.validator.PairValidator;

/**
 * Service providing final report generating from given installations
 * 
 * @author jpeterka
 * 
 */
public class BundleVersionReport extends Report {

	
	Logger log = Logger.getLogger(BundleVersionReport.class);
	List<Installation> installations; 

	/**
	 * Generates report
	 * 
	 * @param installations
	 *            given list of installations
	 * @param filter
	 *            filter definition
	 */
	
	public BundleVersionReport(List<Installation> installations) {
		this.installations = installations;
	}
	
	@Override
	public void generateReport() {
		
		this.installations = installations;

		File file = new File("output.html");
		String filter = Settings.getFilter();

		log.setLevel(Settings.getLogLevel());

		try {
			PrintWriter pw = new PrintWriter(file);
			BufferedWriter bw = new BufferedWriter(pw);
			String style = readFile("vwstyle.css");
			bw.append("<html><head><title>JBDS Version Watch</title><style type=\"text/css\">"
					+ style + "</style></head>");
			bw.append("<body><h2>JBDS Version Watch</h2>");

			bw.append("<h2>Feature list" + (!PairValidator.isNullFilter(filter) ? " for filter = " + filter : "") + "</h2>");
			generateTable(bw, installations, true, filter);
			bw.append("<br/><h2>Plugin list" + (!PairValidator.isNullFilter(filter) ? " for filter = " + filter : "") + "</h2>");
			generateTable(bw, installations, false, filter);

			long elapsed = StopWatch.stop();
			
			bw.append("<p>Generated by VersionWatch 0.3.0 in " + 
				String.format("%d min, %d sec", 
							TimeUnit.MILLISECONDS.toMinutes(elapsed),
							TimeUnit.MILLISECONDS.toSeconds(elapsed) - 
							TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(elapsed))
						)
				+ " at " + 
				(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS")).format(new Date()) + ".</p>");
			bw.append("<p><div class=\"footspace\"></div></body></html>");
			bw.flush();

			printErrorLogFooter();

		} catch (Exception e) {
			log.error("IO error" + e.getMessage());
			e.printStackTrace();
			return;
		}

		log.warn("Report generated to file:///" + file.getAbsolutePath());
	}

	private String readFile(String file) throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(file));
		String line = null;
		StringBuilder stringBuilder = new StringBuilder();
		String ls = System.getProperty("line.separator");

		while ((line = reader.readLine()) != null) {
			stringBuilder.append(line);
			stringBuilder.append(ls);
		}

		reader.close();
		return stringBuilder.toString();
	}

	private void generateTable(BufferedWriter bw,
			List<Installation> installations, boolean feature, String filter)
			throws IOException {

		log.setLevel(Settings.getLogLevel());

		BundleService bs = new BundleService();

		SortedSet<String> featureSet = new TreeSet<String>();

		for (Installation i : installations) {
			for (Bundle b : i.getBundles(feature)) {
				if (PairValidator.isNullFilter(filter) || b.getName().matches(filter))
					/*
					if (featureSet.contains(b.getName())) {
						Issue i = new Issue();
						i.setSeverity(2);
						i.setMessage("Multiple bundle versions");
						b.getIssues().add(i);
					}
					*/
					featureSet.add(b.getName());
			}
		}

		bw.append("<table width=\"100%\" max-width=\"1024px\">");

		// first row

		String bundles = "Plugin";
		if (feature) {
			bundles = "Feature";
		}
		if (!PairValidator.isNullFilter(filter))
		{
			bundles += " (filter=/" + filter + "/)";
		}
		printErrorLogHeader(bundles);

		StringBuffer headerRow = new StringBuffer("<tr class=\"header\"><td><b>" + bundles + "</b></td>");
		for (Installation i : installations) {
			headerRow.append("<td><b>" + i.getRootFolderName() + "</b></td>");
		}
		headerRow.append("</tr>\n");
		
		// next rows
		int rowCount = 0;
		int showHeaderEveryXRows = 40;
		for (String s : featureSet) {
			if (rowCount % showHeaderEveryXRows == 0)
			{
				bw.append(headerRow);
			}
			rowCount++;
			bw.append("<tr><td id=\"" + bundles + "_" + s + "\"><a href=\"#"
					+ bundles + "_" + s + "\">" + s + "</a></td>");

			for (Installation i : installations) {
				Bundle bundleFromList = bs.getBundleFromList(
						i.getBundles(feature), s);					
				
				log.debug("Plugin ID: " + s);
				
				String tooltip = " title=\"" + i.getRootFolderName() + "&#10;";
				if (bundleFromList != null) {
					tooltip += bundleFromList.getFullName() + "&#10;";
					String c = "";

					int max = bundleFromList.getMaxSeverity();
					if (max == 0)
						c = " class=\"ok\" ";
					else if (max == 1)
						c = " class=\"info\" ";
					else if (max == 3)
						c = " class=\"warning\" ";
					else if (max == 4)
						c = " class=\"error\" ";
					else if (max == 2) 
						c = " class=\"ignored\" ";

					if (bundleFromList.getIssues().size() > 0) {
						tooltip += bundleFromList.getErrorsAndWarnings();
						tooltip += "\" ";
					} else {
						tooltip += "Nothing suspicious";
						tooltip += "\" ";
						c = " class=\"normal\" ";
					}

					printErrorLogInformation(i, bundleFromList);

					bw.append("<td " + c + " " + tooltip + ">"
							+ getIcons(bundleFromList) + bundleFromList.getVersions().toString()  + "</td>");
				} else {
					bw.append("<td " + "Bundle not available in this version\" class=\"none\">N/A</td>");
				}
			}

			bw.append("</tr>\n");
		}

		bw.append("</table>");

	}

	private String getIcons(Bundle b) {
		String ret = "";
		if (b.getBumped()) {
			ret = "<img src=\"img\\bumped.png\"/>";
		}
		return ret;
	}

	private void printErrorLogHeader(String text) {
		log.warn("----------------------------------------------------------------------------------------------------");
		log.warn("Errors found in " + text + ":");
	}

	private void printErrorLogInformation(Installation i, Bundle bundle) {
		for (Issue issue : bundle.getIssues()) {
			if (issue.getSeverity() == Severity.ERROR)
				log.error(bundle.getName() + "," + bundle.getVersion()
						+ " from " + i.getRootFolderName() + " "
						+ issue.getDescription());
		}
	}

	private void printErrorLogFooter() {
		log.warn("----------------------------------------------------------------------------------------------------");
		log.warn("");
	}

	public List<Installation> getInstallations() {
		return installations;
	}

	@Override
	protected void generateBody() {
		// TODO Auto-generated method stub
		
	}


	@Override
	protected String getFileName() {
		return "output.html";
	}

	
	

}
